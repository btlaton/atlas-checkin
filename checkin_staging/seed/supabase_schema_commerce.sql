-- Atlas Check-In commerce schema (products + orders)
-- Run after supabase_schema_bootstrap.sql and supabase_schema_only.sql
-- Adds catalog tables for retail/membership items and order/payment tracking.

-- 1) Optional taxonomy for grouping products
create table if not exists public.product_categories (
  id bigint generated by default as identity primary key,
  name text not null,
  slug text,
  description text,
  sort_order integer default 0,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint ux_product_categories_name unique (name)
);

create unique index if not exists ux_product_categories_name_lower
  on public.product_categories ((lower(name)));

drop index if exists ux_product_categories_slug;

do $$
begin
  if not exists (
    select 1
    from pg_constraint
    where conname = 'ux_product_categories_slug'
      and conrelid = 'public.product_categories'::regclass
  ) then
    alter table public.product_categories
      add constraint ux_product_categories_slug unique (slug);
  end if;
end $$;

drop trigger if exists trg_product_categories_updated_at on public.product_categories;
create trigger trg_product_categories_updated_at
  before update on public.product_categories
  for each row execute procedure public.set_updated_at();

-- 2) Products sold via Atlas (retail, memberships, passes, services)
create table if not exists public.products (
  id bigint generated by default as identity primary key,
  category_id bigint references public.product_categories(id) on delete set null,
  name text not null,
  slug text,
  barcode text,
  product_sku text,
  product_kind text not null default 'retail' check (product_kind in ('retail','membership_plan','service','guest_pass','addon')),
  service_type text,
  service_category text,
  description text,
  is_active boolean not null default true,
  sell_online boolean not null default false,
  inventory_tracking boolean not null default false,
  default_price_type text not null default 'retail',
  our_cost_cents integer default null check (our_cost_cents is null or our_cost_cents >= 0),
  created_by text,
  updated_by text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint ux_products_slug unique (slug),
  constraint ux_products_barcode unique (barcode)
);

create index if not exists idx_products_active_kind
  on public.products (product_kind, is_active)
  where is_active = true;

create unique index if not exists ux_products_sku
  on public.products (product_sku)
  where product_sku is not null;

drop trigger if exists trg_products_updated_at on public.products;
create trigger trg_products_updated_at
  before update on public.products
  for each row execute procedure public.set_updated_at();

-- 3) Price points for each product (retail, online, recurring, etc.)
create table if not exists public.product_prices (
  id bigint generated by default as identity primary key,
  product_id bigint not null references public.products(id) on delete cascade,
  price_type text not null check (price_type in ('retail','online','recurring','one_time','package','complimentary')),
  amount_cents integer not null check (amount_cents >= 0),
  currency char(3) not null default 'USD',
  billing_period text check (billing_period in ('day','week','month','year')),
  billing_interval integer default 1 check (billing_interval is null or billing_interval > 0),
  benefit_quantity integer check (benefit_quantity is null or benefit_quantity >= 0),
  benefit_unit text check (benefit_unit in ('session','visit','day','week','month','pass','service') or benefit_unit is null),
  benefit_window_quantity integer check (benefit_window_quantity is null or benefit_window_quantity >= 0),
  benefit_window_unit text check (benefit_window_unit in ('day','week','month','year') or benefit_window_unit is null),
  is_unlimited boolean not null default false,
  stripe_price_id text,
  is_default boolean not null default false,
  is_active boolean not null default true,
  metadata jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint ux_product_price_unique unique (product_id, price_type)
);

create index if not exists idx_product_prices_active
  on public.product_prices (product_id)
  where is_active = true;

create unique index if not exists ux_product_prices_stripe_id
  on public.product_prices (stripe_price_id)
  where stripe_price_id is not null;

drop trigger if exists trg_product_prices_updated_at on public.product_prices;
create trigger trg_product_prices_updated_at
  before update on public.product_prices
  for each row execute procedure public.set_updated_at();

-- 4) Orders initiated by staff/mobile checkout flows
create table if not exists public.orders (
  id bigint generated by default as identity primary key,
  order_number text,
  member_id bigint references public.members(id) on delete set null,
  guest_name text,
  guest_email text,
  guest_phone text,
  staff_id bigint references public.staff(id) on delete set null,
  order_type text not null default 'retail' check (order_type in ('retail','membership','guest_pass','service','mixed')),
  status text not null default 'draft' check (status in ('draft','pending','awaiting_payment','paid','partially_refunded','refunded','canceled','failed','expired')),
  currency char(3) not null default 'USD',
  subtotal_cents integer not null default 0 check (subtotal_cents >= 0),
  tax_cents integer not null default 0 check (tax_cents >= 0),
  discount_cents integer not null default 0 check (discount_cents >= 0),
  tip_cents integer not null default 0 check (tip_cents >= 0),
  total_cents integer not null default 0 check (total_cents >= 0),
  notes text,
  checkout_session_id text,
  payment_intent_id text,
  payment_link_url text,
  expires_at timestamptz,
  paid_at timestamptz,
  canceled_at timestamptz,
  metadata jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint ux_orders_number unique (order_number)
);

create index if not exists idx_orders_member_status
  on public.orders (member_id, status);

create index if not exists idx_orders_checkout_session
  on public.orders (checkout_session_id)
  where checkout_session_id is not null;

drop trigger if exists trg_orders_updated_at on public.orders;
create trigger trg_orders_updated_at
  before update on public.orders
  for each row execute procedure public.set_updated_at();

-- 5) Line items linked to products/prices
create table if not exists public.order_items (
  id bigint generated by default as identity primary key,
  order_id bigint not null references public.orders(id) on delete cascade,
  product_id bigint references public.products(id) on delete set null,
  price_id bigint references public.product_prices(id) on delete set null,
  description text not null,
  quantity integer not null default 1 check (quantity > 0),
  unit_amount_cents integer not null check (unit_amount_cents >= 0),
  tax_cents integer not null default 0 check (tax_cents >= 0),
  discount_cents integer not null default 0 check (discount_cents >= 0),
  total_cents integer not null check (total_cents >= 0),
  metadata jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists idx_order_items_order
  on public.order_items (order_id);

drop trigger if exists trg_order_items_updated_at on public.order_items;
create trigger trg_order_items_updated_at
  before update on public.order_items
  for each row execute procedure public.set_updated_at();

-- 6) Payment attempts synced from Stripe (Checkout/PaymentIntent)
create table if not exists public.order_payments (
  id bigint generated by default as identity primary key,
  order_id bigint not null references public.orders(id) on delete cascade,
  amount_cents integer not null check (amount_cents >= 0),
  currency char(3) not null default 'USD',
  status text not null check (status in ('requires_payment_method','requires_confirmation','requires_action','processing','requires_capture','canceled','succeeded','refunded','partially_refunded','failed')),
  payment_method_type text,
  stripe_payment_intent_id text,
  stripe_checkout_session_id text,
  stripe_charge_id text,
  receipt_url text,
  error_code text,
  error_message text,
  raw_payload jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint ux_order_payments_intent unique (stripe_payment_intent_id)
);

create index if not exists idx_order_payments_order_status
  on public.order_payments (order_id, status);

drop trigger if exists trg_order_payments_updated_at on public.order_payments;
create trigger trg_order_payments_updated_at
  before update on public.order_payments
  for each row execute procedure public.set_updated_at();
